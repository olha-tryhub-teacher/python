from math import hypot
from pygame import *
from random import randint

from socket import socket, AF_INET, SOCK_STREAM  # üÜï –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–µ—Ä–µ–∂–µ—é (TCP —Å–æ–∫–µ—Ç–∏)
from threading import Thread  # üÜï –Ü–º–ø–æ—Ä—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ—Ç–æ–∫—É

# üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–æ–∫–µ—Ç–∞ —ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –ø–æ—Ä—Ç 8080)
sock = socket(AF_INET, SOCK_STREAM)
sock.connect(('localhost', 8080))
# üÜï –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî —Å–ø–∏—Å–æ–∫: [id, x, y, r]
my_data = list(map(int, sock.recv(64).decode().strip().split(',')))
my_id = my_data[0]
my_player = my_data[1:]

sock.setblocking(False)  # üÜï –†–æ–±–∏–º–æ —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫—É—é—á–∏–º (—â–æ–± –Ω–µ –∑–∞–≤–∏—Å–∞–≤ –ø—Ä–∏ recv)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ ===
# my_player = [0, 0, 20]  # [x, y, —Ä–∞–¥—ñ—É—Å] - –≥–æ–ª–æ–≤–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å (–∑–µ–ª–µ–Ω–∞ –∫—É–ª—å–∫–∞)
my_player_speed = 10  # —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É –≥—Ä–∞–≤—Ü—è
window_size = 700, 500  # —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Pygame
init()
window = display.set_mode(window_size)
clock = time.Clock()
f = font.Font(None, 50)
all_players = []
running = True
lose = False


# üÜï –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ —Å–ª—É—Ö–∞—î —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def receive_data():
    global all_players, running, lose
    while running:
        try:
            data = sock.recv(4096).decode().strip()
            if data == "LOSE":  # –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–∞–∑–∫–∏
                lose = True
            elif data:
                parts = data.strip('|').split('|')  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ
                all_players = [list(map(int, p.split(',')))
                               for p in parts if len(p.split(',')) == 4]
        except:
            pass


Thread(target=receive_data, daemon=True).start()  # üÜï –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏–π–æ–º –¥–∞–Ω–∏—Ö —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ


# === –ö–ª–∞—Å –¥–ª—è —ñ–Ω—à–∏—Ö –∫–ª—ñ—Ç–∏–Ω (–º–∞–ª–µ–Ω—å–∫—ñ –∫—É–ª—å–∫–∏) ===
class Cell:
    def __init__(self, x, y, r, c):
        self.x = x  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
        self.y = y  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
        self.radius = r  # —Ä–∞–¥—ñ—É—Å –∫—É–ª—å–∫–∏
        self.color = c  # –∫–æ–ª—ñ—Ä –∫—É–ª—å–∫–∏ (RGB)

    def check_collision(self, player_x, player_y, player_r):
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑ –≥—Ä–∞–≤—Ü–µ–º (–≤—ñ–¥—Å—Ç–∞–Ω—å –º–µ–Ω—à–∞ –∑–∞ —Å—É–º—É —Ä–∞–¥—ñ—É—Å—ñ–≤)
        dx = self.x - player_x
        dy = self.y - player_y
        return hypot(dx, dy) <= self.radius + player_r


# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫—É–ª—å–æ–∫ –Ω–∞ –º–∞–ø—ñ ===
other_cells = [Cell(randint(-2000, 2000),  # –≤–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è x
                    randint(-2000, 2000),  # –≤–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è y
                    10,  # —Ä–∞–¥—ñ—É—Å 10
                    (randint(0, 255),  # –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä (R)
                     randint(0, 255),  # G
                     randint(0, 255)))  # B
               for _ in range(300)]  # —Å—Ç–≤–æ—Ä–∏—Ç–∏ 300 –∫—É–ª—å–æ–∫

# === –û—Å–Ω–æ–≤–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª ===
running = True
while running:
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏—Ö—ñ–¥ –∑ –≥—Ä–∏)
    for e in event.get():
        if e.type == QUIT:
            running = False

    # –û—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω–∞
    window.fill((255, 255, 255))  # –±—ñ–ª–∏–π —Ñ–æ–Ω

    # –ú–∞—Å—à—Ç–∞–± –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –≥—Ä–∞–≤—Ü—è: —á–∏–º –±—ñ–ª—å—à–∏–π ‚Äî —Ç–∏–º –º–µ–Ω—à–∏–π –º–∞—Å—à—Ç–∞–±
    scale = max(0.3, min(50 / my_player[2], 1.5))

    # üÜï –ú–∞–ª—é—î–º–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–≤–æ–Ω–∏–º–∏ –∫—Ä—É–∂–µ—á–∫–∞–º–∏
    for p in all_players:
        if p[0] == my_id: continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–±–µ
        sx = int((p[1] - my_player[0]) * scale + 500)
        sy = int((p[2] - my_player[1]) * scale + 500)
        draw.circle(window, (255, 0, 0), (sx, sy), int(p[3] * scale))


    # –ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –≤ —Ü–µ–Ω—Ç—Ä—ñ –µ–∫—Ä–∞–Ω–∞
    draw.circle(window, (0, 255, 0),
                (window_size[0] // 2, window_size[1] // 2),
                int(my_player[2] * scale))

    # === –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –∫–ª—ñ—Ç–∏–Ω ===
    to_remove = []  # —Å–ø–∏—Å–æ–∫ –∫—É–ª—å–æ–∫, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏
    for c in other_cells:
        if c.check_collision(my_player[0], my_player[1], my_player[2]):
            # –Ø–∫—â–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è ‚Äî –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ –∑–±—ñ–ª—å—à–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è
            to_remove.append(c)
            my_player[2] += int(c.radius * 0.2)  # –≥—Ä–∞–≤–µ—Ü—å —Ä–æ—Å—Ç–µ –ø—ñ—Å–ª—è –ø–æ–≥–ª–∏–Ω–∞–Ω–Ω—è
        else:
            # –Ø–∫—â–æ –Ω–µ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è ‚Äî –º–∞–ª—é—î–º–æ –∫—É–ª—å–∫—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –º–∞—Å—à—Ç–∞–± —ñ —Ü–µ–Ω—Ç—Ä
            sx = int((c.x - my_player[0]) * scale + window_size[0] // 2)
            sy = int((c.y - my_player[1]) * scale + window_size[1] // 2)
            draw.circle(window, c.color, (sx, sy), int(c.radius * scale))

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≥–ª–∏–Ω—É—Ç—ñ –∫—É–ª—å–∫–∏
    for c in to_remove:
        other_cells.remove(c)

    # üÜï –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –ø—Ä–æ–≥—Ä–∞–≤ ‚Äî –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if lose:
        t = f.render('U lose!', 1, (244, 0, 0))
        window.blit(t, (400, 500))

    # === –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü–µ–º (—Ä—É—Ö W, A, S, D) ===
    # üÜï –Ø–∫—â–æ —â–µ –Ω–µ –ø—Ä–æ–≥—Ä–∞–≤ ‚Äî –º–æ–∂–Ω–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü–µ–º
    if not lose:
        keys = key.get_pressed()
        if keys[K_w]: my_player[1] -= my_player_speed
        if keys[K_s]: my_player[1] += my_player_speed
        if keys[K_a]: my_player[0] -= my_player_speed
        if keys[K_d]: my_player[0] += my_player_speed

        # üÜï –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try:
            msg = f"{my_id},{my_player[0]},{my_player[1]},{my_player[2]}"
            sock.send(msg.encode())
        except:
            pass

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
    display.update()
    clock.tick(60)  # 60 –∫–∞–¥—Ä—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É

# === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ ===
quit()
